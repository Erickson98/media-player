<div id="playing-container">
  <p>Sin canción en reproducción</p>
</div>

<template id="playing-tpl">
  <div class="container-playing-component">
    <div>
      <img
        data-field="album-cover"
        alt="cover"
        width="60"
        class="img-playing-view"
      />
    </div>
    <div class="container-meta-description-song">
      <span data-field="track-name"></span>
      <span data-field="artist-name"></span>
    </div>
  </div>
</template>

<script>
  const container = document.getElementById("playing-container");
  const tpl = document.getElementById("playing-tpl");

  function renderPlaying(lastPlayed) {
    container.replaceChildren();
    console.log(lastPlayed);
    const node = tpl.content.cloneNode(true);
    const q = (sel) => node.querySelector(sel);

    let track = lastPlayed?.items?.[0]?.track;
    if (!track) {
      track = lastPlayed?.item;
    }
    if (!track) {
      container.innerHTML = `<p>Sin canción en reproducción</p>`;
      return;
    }

    q('[data-field="album-cover"]').src = track.album.images?.[2]?.url || "";
    q('[data-field="track-name"]').textContent = track.name || "—";
    q('[data-field="artist-name"]').textContent =
      track.artists?.[0]?.name || "—";

    container.appendChild(node);
  }

  // 1) Intentar desde localStorage

  async function main() {
    try {
      let lastPlayed = JSON.parse(localStorage.getItem("lastPlayed"));

      if (lastPlayed && lastPlayed.items?.length) {
        renderPlaying(lastPlayed);
      } else {
        // 2) Si no hay, usar lo que vino del SSR (props de Astro)
        async function getLastPlayed() {
          const lastPlayed = await fetch(
            "/api/spotify/me/player/recently-played?limit=2"
          );
          return await lastPlayed.json();
        }
        lastPlayed = await getLastPlayed();
        if (lastPlayed?.items?.length) {
          renderPlaying(lastPlayed);
          localStorage.setItem("lastPlayed", JSON.stringify(lastPlayed));
        } else {
          container.innerHTML = `<p>Sin canción en reproducción</p>`;
        }
      }
      return lastPlayed;
    } catch (e) {
      console.warn("Error parsing lastPlayed from localStorage", e);
    }
  }
  let lastPlayed = await main();
  window.dispatchEvent(
    new CustomEvent("ui:track", {
      detail: {
        albumId: lastPlayed.items[0].track.album.id,
        trackId: lastPlayed.items[0].track.id,
        trackName: lastPlayed.items[0].track.name,
        imgAlbum: lastPlayed.items[0].track.album.images,
        artistImg: JSON.stringify(lastPlayed.items[0].track.album.images),
        trackArtists: lastPlayed.items[0].track.artists,
        bioArtist: "Something",
        artistName: "SADE",
        albumName: lastPlayed.items[0].track.album.name,
      },
    })
  );
  window.addEventListener("route:playing", (e) => {
    console.log("YOOOOOOOOOO");
    console.log(e.detail.lastPlayed);
    renderPlaying(e.detail.lastPlayed);
  });
</script>

<style>
  .container-playing-component {
    display: flex;
    align-items: center;
    font-size: small;
    gap: 20px;
  }
  .container-meta-description-song {
    display: flex;
    flex-direction: column;
    text-align: left;
  }
  .img-playing-view {
    border-radius: 5px;
  }
</style>

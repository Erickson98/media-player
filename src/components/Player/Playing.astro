---
export const prerender = false;
---

<div class="without-song-container" id="playing-container">
  <p>Sin canción en reproducción</p>
</div>

<template id="playing-tpl">
  <div class="container-playing-component">
    <div>
      <img
        data-field="album-cover"
        alt="cover"
        width="60"
        class="img-playing-view"
        loading="eager"
      />
    </div>
    <div style="width: 100%;">
      <div class="container-meta-description-song">
        <span data-field="track-name"></span>
      </div>
      <div class="container-meta-description-song">
        <span data-field="artist-name"></span>
      </div>
    </div>
  </div>
</template>

<script nonce={Astro.props.nonce}></script>
<script nonce={Astro.locals.nonce} type="module">
  const container = document.getElementById("playing-container");
  const tpl = document.getElementById("playing-tpl");
  const KEY_FOR_LAST_PLAYED = "lastPlayedHistory";
  function renderPlaying() {
    const lastPlayed = JSON.parse(localStorage.getItem(KEY_FOR_LAST_PLAYED));
    container.replaceChildren();
    console.log(lastPlayed);
    const node = tpl.content.cloneNode(true);
    const q = (sel) => node.querySelector(sel);

    if (!lastPlayed) {
      container.innerHTML = "";
      return;
    }

    q('[data-field="album-cover"]').src = lastPlayed.imgAlbum || "";
    q('[data-field="track-name"]').textContent = lastPlayed.trackName || "";
    q('[data-field="artist-name"]').textContent = lastPlayed.artistName || "";

    container.appendChild(node);
  }

  // 1) Intentar desde localStorage

  async function main() {
    try {
      let lastPlayed = JSON.parse(localStorage.getItem(KEY_FOR_LAST_PLAYED));
      if (lastPlayed) {
        renderPlaying(lastPlayed);
      } else {
        // // 2) Si no hay, usar lo que vino del SSR (props de Astro)
        async function getLastPlayed() {
          const lastPlayed = await fetch(
            "/api/spotify/me/player/recently-played?limit=2"
          );
          return await lastPlayed.json();
        }
        lastPlayed = await getLastPlayed();
        if (lastPlayed?.items?.length) {
          renderPlaying(lastPlayed);
          localStorage.setItem("lastPlayed", JSON.stringify(lastPlayed));
        }
        // // else {
        // //   container.innerHTML = `<p>Sin canción en reproducción</p>`;
        // // }
      }

      window.dispatchEvent(
        new CustomEvent("ui:track", {
          detail: {
            albumId: lastPlayed.albumId,
            trackId: lastPlayed.id,
            trackName: lastPlayed.name,
            imgAlbum: lastPlayed.imgAlbum,
            artistImg: lastPlayed.artistImg,
            trackArtists: lastPlayed.trackArtists,
            bioArtist: lastPlayed.bioArtist,
            artistName: lastPlayed.artistName,
            albumName: lastPlayed.albumName,
          },
        })
      );
      window.addEventListener("DOMContentLoaded", () => {
        const marqueeStates = new WeakMap();

        function startMarquee(container, opts = {}) {
          const span = container.querySelector("span");
          if (!span) return;

          container.style.position = "relative";
          container.style.overflow = "hidden";
          span.style.position = "relative";
          span.style.whiteSpace = "nowrap";
          span.style.left = span.style.left || "0px";

          const state = {
            pos: 0,
            dir: -1,
            paused: false,
            rafId: null,
            pauseTime: opts.pauseTime ?? 1000,
            speed: opts.speed ?? 0.5,
          };
          marqueeStates.set(container, state);

          const step = () => {
            const containerWidth = container.clientWidth;
            const textWidth = span.scrollWidth;

            // Si cabe, detener y resetear
            if (textWidth <= containerWidth) {
              span.style.left = "0px";
              if (state.rafId) cancelAnimationFrame(state.rafId);
              state.rafId = null;
              return;
            }

            if (!state.paused) {
              state.pos += state.dir * state.speed;
              span.style.left = state.pos + "px";

              // Extremo derecho (primer carácter)
              if (state.pos >= 0) {
                state.paused = true;
                setTimeout(() => {
                  state.dir = -1;
                  state.paused = false;
                }, state.pauseTime);
              }

              // Extremo izquierdo (último carácter visible)
              if (state.pos <= containerWidth - textWidth) {
                state.paused = true;
                setTimeout(() => {
                  state.dir = 1;
                  state.paused = false;
                }, state.pauseTime);
              }
            }

            state.rafId = requestAnimationFrame(step);
          };

          if (!container.dataset.marqueeHoverBound) {
            container.addEventListener("mouseenter", () => {
              const s = marqueeStates.get(container);
              if (s) s.paused = true;
            });
            container.addEventListener("mouseleave", () => {
              const s = marqueeStates.get(container);
              if (s) s.paused = false;
            });
            container.dataset.marqueeHoverBound = "1";
          }

          state.rafId = requestAnimationFrame(step);
        }

        function stopMarquee(container) {
          const state = marqueeStates.get(container);
          if (state?.rafId) {
            cancelAnimationFrame(state.rafId);
            state.rafId = null;
          }
        }

        function updateWidth() {
          const screenWidth = window.innerWidth;
          const newWidth = screenWidth * 0.3 - 100;

          document
            .querySelectorAll(".container-meta-description-song")
            .forEach((el) => {
              const span = el.querySelector("span");
              if (!span) return;

              stopMarquee(el);
              span.style.left = "0px";

              el.style.width = newWidth + "px";

              if (span.scrollWidth > el.clientWidth) {
                startMarquee(el, { speed: 0.3, pauseTime: 2000 });
              }
            });
        }

        updateWidth();
        window.addEventListener("resize", updateWidth);
      });
    } catch (e) {
      console.warn("Error parsing lastPlayed from localStorage", e);
    }
  }
  main();
  window.addEventListener("route:playing", (e) => {
    main();
  });
</script>

<style>
  .container-playing-component {
    display: flex;
    align-items: center;
    font-size: small;
    gap: 20px;
  }
  .container-meta-description-song {
    /* display: flex;
    flex-direction: column;
    text-align: left; */
    /* display: inline-grid; */
  }
  .img-playing-view {
    border-radius: 5px;
  }
</style>

---
import NextIcon from "src/assets/icons/next.svg?url";
import PreviousIcon from "src/assets/icons/previous.svg?url";
import PlayIcon from "src/assets/icons/iconPlay.svg?url";
---

<div class="container-play">
  <div class="top-play-component-actions">
    <button class="previous-action">
      <img src={PreviousIcon} width="15" alt="" srcset="" />
    </button>

    <button class="play-action">
      <img
        src={PlayIcon}
        class="play-action-icon"
        data-action="pause"
        width="15"
        alt=""
        srcset=""
      />
    </button>

    <button class="next-action">
      <img src={NextIcon} width="15" alt="" srcset="" />
    </button>
  </div>
  <div class="container-for-play-component">
    <span id="time-current">0:00</span>
    <div class="progress-container" id="progress-container">
      <div class="progress-bar" id="progress-bar"></div>
      <div class="progress-knob" id="progress-knob"></div>
    </div>
    <span id="time-total">0:00</span>
  </div>
</div>

<style>
  .container-play {
    width: 42%;
    display: flex;
    flex-direction: column; /* acciones arriba y barra abajo */
    /* gap: 12px; */
    color: #fff;
    font-family: system-ui, sans-serif;
  }

  .top-play-component-actions {
    /* estilos para los botones de arriba */
  }

  .bottom-play-component-actions {
    display: flex;
    align-items: center;
    gap: 5px;
    width: 100%;
  }

  .bottom-play-component-actions .time {
    font-size: 12px;
    width: 40px; /* ancho fijo para alinear */
    text-align: center;
  }

  .progress-container {
    height: 4px;
    width: 100%;
    background: #333; /* Barra gris */
    border-radius: 8px;
    overflow: hidden;
    position: relative;
  }

  .progress-bar {
    height: 100%;
    width: 0%; /* empieza vac√≠a */
    background: #fff; /* Progreso blanco */
    border-radius: 8px 0 0 8px;
    transition: width 0.2s linear;
  }
  .progress-container {
    height: 6px;
    /* width: 300px; */
    background: #333;
    border-radius: 6px;
    position: relative;
    cursor: pointer;
  }
  .progress-bar {
    height: 100%;
    width: 100%;
    background: #1db954;
    transform: scaleX(0);
    transform-origin: left center;
    will-change: transform;
  }
  .progress-knob {
    position: absolute;
    top: 50%;
    left: 0;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #fff;
    transform: translate(0, -50%);
    will-change: transform;
    pointer-events: none;
  }
  .container-for-play-component {
    display: flex;
    flex-direction: row;
    justify-content: center;
    width: 100%;
    align-items: center;
    gap: 5px;
  }
</style>

<script>
  let player;
  let duration = 0;
  let position = 0;
  let lastUpdate = 0;
  let isPlaying = false;

  const bar = document.getElementById("progress-bar");
  const knob = document.getElementById("progress-knob");
  const timeCurrent = document.getElementById("time-current");
  const timeTotal = document.getElementById("time-total");
  const container = document.getElementById("progress-container");

  function msToTime(ms) {
    const m = Math.floor(ms / 60000);
    const s = Math.floor((ms % 60000) / 1000);
    return `${m}:${s.toString().padStart(2, "0")}`;
  }

  function updateUI() {
    const percent = position / duration;
    bar.style.transform = `scaleX(${percent})`;
    knob.style.transform = `translate(${percent * container.clientWidth}px, -50%)`;
    timeCurrent.textContent = msToTime(position);
    timeTotal.textContent = msToTime(duration);
  }

  function animate() {
    if (isPlaying) {
      const now = Date.now();
      position += now - lastUpdate;
      if (position > duration) position = duration;
      updateUI();
      lastUpdate = now;
    } else {
      lastUpdate = Date.now();
    }
    requestAnimationFrame(animate);
  }
  import { spotifyPlayerAction } from "@/scripts/spotifyPlayerAction";
  import { localStorageGet } from "src/utils/localStorage";
  import PauseIcon from "src/assets/icons/iconPause.svg?url";
  import PlayIcon from "src/assets/icons/iconPlay.svg?url";
  import { playerEvents } from "src/utils/playerEvents";

  const previousElement = document.querySelector(
    ".previous-action"
  ) as HTMLElement;
  previousElement?.addEventListener("click", async () => {
    try {
      await spotifyPlayerAction("previous", { deviceId: window.deviceId });
    } catch (error) {}
  });

  const playElement = document.querySelector(".play-action");

  playElement?.addEventListener("click", async () => {
    let played = false;
    const imgElement = document.querySelector(
      ".play-action-icon"
    ) as HTMLImageElement;
    if (imgElement.dataset.action === "pause") {
      imgElement.src = PauseIcon;
      imgElement.dataset.action = "play";
      const lastPlayed = localStorageGet("lastPlayedHistory");
      if (!played) {
        await spotifyPlayerAction("play", {
          uris: [`spotify:track:${lastPlayed.trackId}`],
          deviceId: window.deviceId,
        });
      }
      playerEvents.dispatchEvent(new Event("resume"));
    } else if (imgElement.dataset.action === "play") {
      imgElement.src = PlayIcon;
      imgElement.dataset.action = "pause";
      // await spotifyPlayerAction("pause", {
      //   deviceId: window.deviceId,
      // });
      playerEvents.dispatchEvent(new Event("pause"));
    }
  });
  playerEvents.addEventListener("state", (e) => {
    const state = e.detail;
    if (!state) return;
    duration = state.duration;
    position = state.position;
    isPlaying = !state.paused;
    lastUpdate = Date.now();
    updateUI();
  });
  animate();
  const nextElement = document.querySelector(".next-action");
  nextElement?.addEventListener("click", async () => {
    try {
      await spotifyPlayerAction("next", { deviceId: window.deviceId });
    } catch (error) {}
  });
</script>
